{"version":"1.120.1","results":[{"check_id":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":18,"col":24,"offset":561},"end":{"line":18,"col":44,"offset":581},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION","asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps","https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"],"category":"security","technology":["java"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string","shortlink":"https://sg.run/OPXp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":18,"col":24,"offset":561},"end":{"line":18,"col":44,"offset":581},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["jdbc"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli","shortlink":"https://sg.run/AvkL"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.object-deserialization.object-deserialization","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":40,"col":9,"offset":1259},"end":{"line":40,"col":86,"offset":1336},"extra":{"message":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.","metadata":{"cwe":["CWE-502: Deserialization of Untrusted Data"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION","references":["https://www.owasp.org/index.php/Deserialization_of_untrusted_data","https://www.oracle.com/java/technologies/javase/seccodeguide.html#8"],"category":"security","technology":["java"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization","shortlink":"https://sg.run/Ek0A"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":48,"col":9,"offset":1616},"end":{"line":48,"col":55,"offset":1662},"extra":{"message":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.","fix":"dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        dbf.newDocumentBuilder();","metadata":{"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"asvs":{"control_id":"5.5.2 Insecue XML Deserialization","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention","section":"V5 Validation, Sanitization and Encoding","version":"4"},"references":["https://semgrep.dev/blog/2022/xml-security-in-java","https://semgrep.dev/docs/cheat-sheets/java-xxe/","https://blog.sonarsource.com/secure-xml-processor","https://xerces.apache.org/xerces2-j/features.html"],"category":"security","technology":["java","xml"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing","shortlink":"https://sg.run/PYBz"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.crypto.use-of-md5.use-of-md5","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":59,"col":54,"offset":2081},"end":{"line":59,"col":59,"offset":2086},"extra":{"message":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.","fix":"\"SHA-512\"","metadata":{"functional-categories":["crypto::search::hash-algorithm::java.security"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-328: Use of Weak Hash"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5","category":"security","technology":["java"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Hashing Algorithm"],"source":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5","shortlink":"https://sg.run/ryJn"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","path":"/src/1746803349_test_vulnerabilities.java","start":{"line":75,"col":25,"offset":2554},"end":{"line":75,"col":45,"offset":2574},"extra":{"message":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.","metadata":{"functional-categories":["net::search::crypto-config::java.net"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET","asvs":{"control_id":"6.2.5 Insecure Algorithm","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms","section":"V6 Stored Cryptography Verification Requirements","version":"4"},"category":"security","technology":["java"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","shortlink":"https://sg.run/W8zA"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["/src/1746803349_test_vulnerabilities.java"]},"skipped_rules":[]}